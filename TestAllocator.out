==18542== Memcheck, a memory error detector
==18542== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==18542== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==18542== Command: TestAllocator.app
==18542== 
TestAllocator.c++
==18542== Conditional jump or move depends on uninitialised value(s)
==18542==    at 0x40D57F: Allocator<double, 100ul>::try_merge_right(int*, int*) (in /v/filer4b/v38q001/hzesen/cs371/allocator/TestAllocator.app)
==18542==    by 0x40CEA4: Allocator<double, 100ul>::deallocate(double*, unsigned long) (in /v/filer4b/v38q001/hzesen/cs371/allocator/TestAllocator.app)
==18542==    by 0x4093D4: TestAllocator<Allocator<double, 100ul> >::test_ten() (in /v/filer4b/v38q001/hzesen/cs371/allocator/TestAllocator.app)
==18542==    by 0x40DEC1: CppUnit::TestCaller<TestAllocator<Allocator<double, 100ul> > >::runTest() (in /v/filer4b/v38q001/hzesen/cs371/allocator/TestAllocator.app)
==18542==    by 0x4E558E9: CppUnit::TestCaseMethodFunctor::operator()() const (in /usr/lib/libcppunit-1.12.so.1.0.0)
==18542==    by 0x4E48E33: CppUnit::DefaultProtector::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==18542==    by 0x4E51E66: CppUnit::ProtectorChain::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==18542==    by 0x4E5C593: CppUnit::TestResult::protect(CppUnit::Functor const&, CppUnit::Test*, std::string const&) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==18542==    by 0x4E55687: CppUnit::TestCase::run(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==18542==    by 0x4E55DC2: CppUnit::TestComposite::doRunChildTests(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==18542==    by 0x4E55CE5: CppUnit::TestComposite::run(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==18542==    by 0x4E55DC2: CppUnit::TestComposite::doRunChildTests(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==18542== 
==18542== Conditional jump or move depends on uninitialised value(s)
==18542==    at 0x40D57F: Allocator<double, 100ul>::try_merge_right(int*, int*) (in /v/filer4b/v38q001/hzesen/cs371/allocator/TestAllocator.app)
==18542==    by 0x40CEA4: Allocator<double, 100ul>::deallocate(double*, unsigned long) (in /v/filer4b/v38q001/hzesen/cs371/allocator/TestAllocator.app)
==18542==    by 0x409D40: TestAllocator<Allocator<double, 100ul> >::max_allocation() (in /v/filer4b/v38q001/hzesen/cs371/allocator/TestAllocator.app)
==18542==    by 0x40DEC1: CppUnit::TestCaller<TestAllocator<Allocator<double, 100ul> > >::runTest() (in /v/filer4b/v38q001/hzesen/cs371/allocator/TestAllocator.app)
==18542==    by 0x4E558E9: CppUnit::TestCaseMethodFunctor::operator()() const (in /usr/lib/libcppunit-1.12.so.1.0.0)
==18542==    by 0x4E48E33: CppUnit::DefaultProtector::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==18542==    by 0x4E51E66: CppUnit::ProtectorChain::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==18542==    by 0x4E5C593: CppUnit::TestResult::protect(CppUnit::Functor const&, CppUnit::Test*, std::string const&) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==18542==    by 0x4E55687: CppUnit::TestCase::run(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==18542==    by 0x4E55DC2: CppUnit::TestComposite::doRunChildTests(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==18542==    by 0x4E55CE5: CppUnit::TestComposite::run(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==18542==    by 0x4E55DC2: CppUnit::TestComposite::doRunChildTests(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==18542== 
..........................


OK (26 tests)


Done.
==18542== 
==18542== HEAP SUMMARY:
==18542==     in use at exit: 122,880 bytes in 6 blocks
==18542==   total heap usage: 665 allocs, 659 frees, 209,959 bytes allocated
==18542== 
==18542== LEAK SUMMARY:
==18542==    definitely lost: 0 bytes in 0 blocks
==18542==    indirectly lost: 0 bytes in 0 blocks
==18542==      possibly lost: 0 bytes in 0 blocks
==18542==    still reachable: 122,880 bytes in 6 blocks
==18542==         suppressed: 0 bytes in 0 blocks
==18542== Rerun with --leak-check=full to see details of leaked memory
==18542== 
==18542== For counts of detected and suppressed errors, rerun with: -v
==18542== Use --track-origins=yes to see where uninitialised values come from
==18542== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 4 from 4)
